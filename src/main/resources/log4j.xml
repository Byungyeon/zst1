<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%-5p](%-35c{1}:%-3L) %m%n" />
			<!-- %L 옵션은 라인넘버가 출력되나 속도저하가 심하다. -->
			<!--<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%-5p](%-30c{1}:%-3L) %m%n" />-->
		</layout>
		
		<filter class="org.apache.log4j.varia.StringMatchFilter">
	      <param name="StringToMatch" value="Result" />
	      <param name="AcceptOnMatch" value="false" />
	    </filter>
	</appender>
	
	<logger name="java.sql">  
	    <level value="DEBUG"/>  
			<appender-ref ref="console"/>  
	</logger>  
 
	<logger name="org.springframework" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger>
	<logger name="org.springframework.jdbc.core.JdbcTemplate" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger>
<!--
	<logger name="org.springframework.jdbc.core.StatementCreatorUtils" additivity="false">
		<level value="TRACE" />
		<appender-ref ref="console" />
	</logger>
-->
	<logger name="apps.dao.mapinfo" additivity="false">
		<level value="TRACE" />
		<appender-ref ref="console" />
	</logger>
	<logger name="org.mybatis" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger>	
	<root>
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
<!--
%p : debug, info, warn, error, fatal 등의 priority 가 출력된다.

%m : 로그내용이 출력된다.
%d : 로깅 이벤트가 발생한 시간을 기록합니다. ex) %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS}같은 형태로 사용하며 SimpleDateFormat에 따른 포맷팅을 하면 된다.

%t : 로그이벤트가 발생된 쓰레드의 이름을 출력한다.
%% : % 표시를 출력하기 위해 사용한다.
%n : 플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일 것이다.
%c : 카테고리를 출력한다. ex) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력된다.
%C : 클래스명을 표시한다. ex) 클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력된다.
%F : 로깅이 발생한 프로그램 파일명을 나타낸다.
%l : 로깅이 발생한 caller의 정보를 나타낸다.
%L : 로깅이 발생한 caller의 라인수를 나타낸다.
%M : 로깅이 발생한 method 이름을 나타낸다.
%r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
%x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력한다.
%X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력한다. 
-->
